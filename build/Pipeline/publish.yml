parameters:
  jobName: 'FrameworkDependent'
  jobDisplayName: 'Framework Dependent' 
  artifactName: 'Framework Dependent'
  selfContained: false
  targetFramework: 'net6.0-windows'
  architecture: ''
  sign: true

jobs:
- job: ${{ parameters.jobName }}
  displayName: ${{ parameters.jobDisplayName }}
  condition: and(succeeded(), eq(variables['isMasterBranch'], 'true'))
  variables:
    PfxCertificate: $[ stageDependencies.Build.Certificate.outputs['GenerateCertificate.PfxCertificate'] ]

  steps:
  - template: pre-steps.yml

  - script: choco install innosetup
    displayName: Install InnoSetup

  # This is probably not needed if each publish occurs on a different job
  - task: DeleteFiles@1
    displayName: 'Delete output folder contents'
    inputs:
      sourceFolder: '$(Build.ArtifactStagingDirectory)'
      contents: '**/*'

  - task: DotNetCoreCLI@2
    displayName: 'Run dotnet publish'
    inputs:
      command: publish
      projects: '$(Build.SourcesDirectory)/**/OfficeRibbonXEditor.csproj'
      publishWebProjects: false
      zipAfterPublish: false
      arguments: >-
        --configuration $(buildConfiguration)
        --framework ${{ parameters.targetFramework }}
        --self-contained ${{ parameters.selfContained }}
        --output "$(Build.ArtifactStagingDirectory)"
        --runtime win-${{ parameters.architecture }}
        
  - task: PowerShell@2
    displayName: 'Sign binaries'
    condition: and(succeeded(), ${{ parameters.sign }} )
    inputs:
      pwsh: true
      targetType: 'filePath'
      filePath: '$(Build.SourcesDirectory)/build/Scripts/Set-Signatures.ps1'
      arguments: >-
        -Source '$(Build.ArtifactStagingDirectory)'
        -Base64Certificate '$(PfxCertificate)'
        -CertificatePassword '$(CODESIGN_PASSWORD)'

  - task: PublishPipelineArtifact@1
    displayName: 'Publish binaries'
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)/OfficeRibbonXEditor' 
      artifactName: '${{ parameters.artifactName }} - Binaries'

  - script: >-
      iscc.exe "$(Build.SourcesDirectory)/build/Installer/setup.iss"
      /DAssemblyName="$(ExtractedAssemblyName)"
      /DAssemblyTitle="$(ExtractedAssemblyTitle)"
      /DAuthors="$(ExtractedAuthors)"
      /DProjectUrl="$(ExtractedPackageProjectUrl)"
      /DDescription="$(ExtractedDescription)"
      /DCopyright="$(ExtractedCopyright)"
      /DVersionPrefix="$(ExtractedVersionPrefix)"
      /DInputFolder="$(Build.ArtifactStagingDirectory)/OfficeRibbonXEditor"
      /DOutputFolder="$(Build.SourcesDirectory)/src/OfficeRibbonXEditor/bin/Installer/${{ parameters.targetFramework }}"
      /DSupportedArchitectures="${{ parameters.architecture }}"
    displayName: Generate installer

  - task: CopyFiles@2
    displayName: 'Copy installer'
    inputs:
      sourceFolder: ''
      contents: |
        $(Build.SourcesDirectory)/src/OfficeRibbonXEditor/bin/Installer/${{ parameters.targetFramework }}/OfficeRibbonXEditor.exe
      targetFolder: '$(Build.ArtifactStagingDirectory)'
      cleanTargetFolder: true # Optional
      flattenFolders: true # Optional

  - task: PowerShell@2
    displayName: 'Check if installer is really copied'
    inputs:
      pwsh: true
      targetType: inline
      script: |
        if (-not (Test-Path "$(Build.ArtifactStagingDirectory)\OfficeRibbonXEditor.exe")) {
          Write-Host "##vso[task.LogIssue type=error;]Missing installer in staging directory"
          exit 1
        }

  - task: PowerShell@2
    displayName: 'Sign installer'
    condition: and(succeeded(), ${{ parameters.sign }} )
    inputs:
      pwsh: true
      targetType: 'filePath'
      filePath: '$(Build.SourcesDirectory)/build/Scripts/Set-Signatures.ps1'
      arguments: >-
        -Source '$(Build.ArtifactStagingDirectory)'
        -Base64Certificate '$(PfxCertificate)'
        -CertificatePassword '$(CODESIGN_PASSWORD)'

  - task: PublishPipelineArtifact@1
    displayName: 'Publish installer'
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)' 
      artifactName: '${{ parameters.artifactName }} - Installer'
