parameters:
  tag: '.NET'
  selfContained: false
  targetFramework: 'net6.0-windows'
  sign: true
  certificate: ''

steps:
- task: DeleteFiles@1
  displayName: 'Delete output folder contents'
  inputs:
    sourceFolder: '$(Build.ArtifactStagingDirectory)'
    contents: '**/*'

- task: DotNetCoreCLI@2
  displayName: 'Prepare standard app package (dotnet publish)'
  inputs:
    command: publish
    projects: '$(Build.SourcesDirectory)/**/OfficeRibbonXEditor.csproj'
    publishWebProjects: false
    zipAfterPublish: false
    arguments: >-
      --configuration $(buildConfiguration)
      --framework ${{ parameters.targetFramework }}
      --runtime win-x64
      --self-contained ${{ parameters.selfContained }}
      --output "$(Build.ArtifactStagingDirectory)"

- task: PowerShell@2
  displayName: 'Sign ${{ parameters.tag }} binaries'
  condition: and(succeeded(), ${{ parameters.sign }} )
  inputs:
    pwsh: true
    targetType: 'filePath'
    filePath: '$(Build.SourcesDirectory)/build/Scripts/Set-Signatures.ps1'
    arguments: >-
      -Source '$(Build.ArtifactStagingDirectory)'
      -Base64Certificate '${{ parameters.certificate }}'
      -CertificatePassword '$(CODESIGN_PASSWORD)'

- task: PublishPipelineArtifact@1
  displayName: 'Publish ${{ parameters.tag }} binaries'
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)/OfficeRibbonXEditor' 
    artifactName: '${{ parameters.tag }} Binaries'

- script: >-
    iscc.exe "$(Build.SourcesDirectory)/build/Installer/setup.iss"
    /DAssemblyName="$(ExtractedAssemblyName)"
    /DAssemblyTitle="$(ExtractedAssemblyTitle)"
    /DAuthors="$(ExtractedAuthors)"
    /DProjectUrl="$(ExtractedPackageProjectUrl)"
    /DDescription="$(ExtractedDescription)"
    /DCopyright="$(ExtractedCopyright)"
    /DVersionPrefix="$(ExtractedVersionPrefix)"
    /DInputFolder="$(Build.ArtifactStagingDirectory)/OfficeRibbonXEditor"
    /DOutputFolder="$(Build.SourcesDirectory)/src/OfficeRibbonXEditor/bin/Installer/${{ parameters.targetFramework }}"
  displayName: Generate ${{ parameters.tag }} installer

- task: CopyFiles@2
  displayName: 'Copy ${{ parameters.tag }} Installer'
  inputs:
    sourceFolder: ''
    contents: |
      $(Build.SourcesDirectory)/src/OfficeRibbonXEditor/bin/Installer/${{ parameters.targetFramework }}/OfficeRibbonXEditor.exe
    targetFolder: '$(Build.ArtifactStagingDirectory)'
    cleanTargetFolder: true # Optional
    flattenFolders: true # Optional

- task: PowerShell@2
  displayName: 'Check if ${{ parameters.tag }} installer is really copied'
  inputs:
    pwsh: true
    targetType: inline
    script: |
      if (-not (Test-Path "$(Build.ArtifactStagingDirectory)\OfficeRibbonXEditor.exe")) {
        Write-Host "##vso[task.LogIssue type=error;]Missing ${{ parameters.tag }} in staging directory"
        exit 1
      }

- task: PowerShell@2
  displayName: 'Sign ${{ parameters.tag }} installer'
  condition: and(succeeded(), ${{ parameters.sign }} )
  inputs:
    pwsh: true
    targetType: 'filePath'
    filePath: '$(Build.SourcesDirectory)/build/Scripts/Set-Signatures.ps1'
    arguments: >-
      -Source '$(Build.ArtifactStagingDirectory)'
      -Base64Certificate '${{ parameters.certificate }}'
      -CertificatePassword '$(CODESIGN_PASSWORD)'

- task: PublishPipelineArtifact@1
  displayName: 'Publish ${{ parameters.tag }} Installer'
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)' 
    artifactName: '${{ parameters.tag }} Installer'
