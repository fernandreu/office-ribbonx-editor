parameters:
- name: createRelease
  displayName: Create GitHub Release
  default: false
  type: boolean

trigger:
  branches:
    include:
    - master
  tags:
    exclude:
    - 'v*'
  paths:
    exclude:
    - LICENSE
    - THIRD-PARTY-NOTICES
    - '**/*.md'

pool:
  vmImage: 'windows-2019'

variables:
- group: GitHubPATGroup
- group: CodeSign
- group: SonarCloud
- name: solution
  value: '**/*.sln'
- name: NUGET_PACKAGES
  value: $(Pipeline.Workspace)/.nuget/packages
- name: isMasterBranch
  value: true
  # value: $[ eq(variables['Build.SourceBranch'], 'refs/heads/master') ]

stages:
- stage: Build
  jobs:

  - job: Testing
    displayName: Testing
    variables:
      targetFramework: net6.0-windows

    steps:
    - template: build.yml
      parameters:
        tag: '.NET'
        targetFramework: $(targetFramework)
        sonarCloud: true
        coverage: true
        #sonarCloud: $(isMasterBranch)
        #coverage: $(isMasterBranch)

  - job: ReleaseScripts
    displayName: Publish Release Scripts
    condition: and(succeeded(), eq(variables['isMasterBranch'], 'true'), ${{ parameters.createRelease }} )
    steps:
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Release Scripts'
      inputs:
        targetPath: '$(Build.SourcesDirectory)/build/Scripts/ReleaseScripts' 
        artifactName: 'ReleaseScripts'

  - job: Publish
    displayName: Publish
    condition: and(succeeded(), eq(variables['isMasterBranch'], 'true'))
    dependsOn: Testing

    steps:
    - template: pre-steps.yml

    - task: PowerShell@2
      displayName: 'Generate Self-Signed Certificate'
      inputs:
        pwsh: true
        targetType: 'filePath'
        filePath: '$(Build.SourcesDirectory)/build/Scripts/New-Certificate.ps1'
        arguments: >-
          -Subject "OfficeRibbonXEditor"
          -FriendlyName "Office RibbonX Editor"
          -VariableName "PfxCertificate"
          -CertificatePassword "$(CODESIGN_PASSWORD)"
          -PublicKeyPath "$(Build.ArtifactStagingDirectory)/CodeSigningCertificate.cer"

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Certificate'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/CodeSigningCertificate.cer' 
        artifactName: 'Code Signing Certificate'

    - template: publish.yml
      parameters:
        tag: '.NET'
        targetFramework: net6.0-windows
        certificate: $(PfxCertificate)
        
    - template: publish.yml
      parameters:
        tag: 'Self-Contained .NET'
        selfContained: true
        targetFramework: net6.0-windows
        certificate: $(PfxCertificate)

- stage: Release
  dependsOn: Build
  condition: and(succeeded(), eq(variables['isMasterBranch'], 'true'), ${{ parameters.createRelease }} )

  jobs:
  - deployment: Deploy
    environment: Release
    strategy:
      runOnce:
        deploy:
          steps:
          
          - task: PowerShell@2
            displayName: 'Check Version'
            inputs:
              pwsh: true
              targetType: 'filePath'
              filePath: '$(Pipeline.Workspace)/ReleaseScripts/PreRelease.ps1'
              arguments: '"$(Pipeline.Workspace)"'

          - task: ArchiveFiles@2
            displayName: 'Archive .NET Framework Binaries'
            inputs:
              rootFolderOrFile: '$(Pipeline.Workspace)/.NET Framework Binaries'
              includeRootFolder: false
              archiveFile: '$(Build.ArtifactStagingDirectory)/OfficeRibbonXEditor-NETFramework-Binaries.zip'
          - pwsh: >-
              Copy-Item
              -Path "$(Pipeline.Workspace)/.NET Framework Installer/OfficeRibbonXEditor.exe"
              -Destination "$(Build.ArtifactStagingDirectory)/OfficeRibbonXEditor-NETFramework-Installer.exe"
            displayName: 'Copy .NET Framework Installer'
          - task: ArchiveFiles@2
            displayName: 'Archive .NET Binaries'
            inputs:
              rootFolderOrFile: '$(Pipeline.Workspace)/.NET Binaries'
              includeRootFolder: false
              archiveFile: '$(Build.ArtifactStagingDirectory)/OfficeRibbonXEditor-NET6-Binaries.zip'
          - pwsh: >-
              Copy-Item
              -Path "$(Pipeline.Workspace)/.NET Installer/OfficeRibbonXEditor.exe"
              -Destination "$(Build.ArtifactStagingDirectory)/OfficeRibbonXEditor-NET6-Installer.exe"
          - task: ArchiveFiles@2
            displayName: 'Archive Self-Contained .NET Binaries'
            inputs:
              rootFolderOrFile: '$(Pipeline.Workspace)/Self-Contained .NET Binaries'
              includeRootFolder: false
              archiveFile: '$(Build.ArtifactStagingDirectory)/OfficeRibbonXEditor-SelfContained-NET6-Binaries.zip'
          - pwsh: >-
              Copy-Item
              -Path "$(Pipeline.Workspace)/Self-Contained .NET Installer/OfficeRibbonXEditor.exe"
              -Destination "$(Build.ArtifactStagingDirectory)/OfficeRibbonXEditor-SelfContained-NET6-Installer.exe"
            displayName: 'Copy Self-Contained .NET Installer'
          - task: GitHubRelease@1
            displayName: 'Create GitHub Release'
            inputs:
              gitHubConnection: 'fernandreu-pat'
              repositoryName: 'fernandreu/office-ribbonx-editor'
              tagSource: userSpecifiedTag
              tag: 'v$(ThreeDigitVersion)'
              title: 'Office RibbonX Editor $(ThreeDigitVersion) (Build $(Build.BuildId))'
              releaseNotesSource: inline
              releaseNotesInline: |
                Released automatically from [Azure Pipelines](https://dev.azure.com/fernandreu-public/OfficeRibbonXEditor/_build/results?buildId=$(Build.BuildId))
                
                ## What's New
                
                For a full list of closed issues since last release, see below. 
                
                ## How to install / use
                
                Download one of the items from the `Assets` section below. If in doubt, I would
                recommend using the .NET Framework Installer.

                There are two types of downloads available:
                - **Binaries:** These are just a `.zip` file ready to be extracted, with no
                  installation necessary. No entry will be created in the control panel's program
                  list
                - **Installers:** A typical self-extracting installer which will require admin
                  rights
                                
                For each of those download types, the tool comes in three variants:
                - **.NET Framework:** This was the main variant in the past. Typically, you
                  shouldn't need to install the .NET Framework redistributable yourself, as
                  this is shipped with Windows 10 nowadays. Otherwise, download the latest
                  runtime [here](https://dotnet.microsoft.com/download/dotnet-framework/thank-you/net48-web-installer)
                - **.NET (6):** This requires at least version 6.0 of the
                  [.NET Runtime](https://dotnet.microsoft.com/download/dotnet/current/runtime)
                  (the one for desktop apps is enough)
                - **Self-contained .NET:** This also uses the .NET 6.0 runtime, but this is
                  embedded in the `.zip` file / installer, so you won't need to install anything
                  else. As a drawback, the resulting tool is much larger in file size
                  
                Due to some technical limitations, the .NET Framework variants no longer consist
                of a single `.exe` file once extracted / installed. Instead, it will contain a
                collection of DLLs and other auxiliary files too, similarly to other variants.


              assets: '$(Build.ArtifactStagingDirectory)/*.*'
              isDraft: true
              changeLogType: issueBased
              changeLogLabels: '[{ "label" : "enhancement", "displayName" : "Enhancements", "state" : "closed" }, { "label" : "bug", "displayName" : "Bugs", "state" : "closed" }]'
