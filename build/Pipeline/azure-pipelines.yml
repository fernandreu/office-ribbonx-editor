trigger:
  branches:
    include:
    - master
  tags:
    exclude:
    - 'v*'
  paths:
    exclude:
    - LICENSE
    - THIRD-PARTY-NOTICES
    - '**/*.md'

pool:
  vmImage: 'windows-2025'

variables:
- group: GitHubPATGroup
- group: CodeSign
- group: SonarCloud
- name: solution
  value: '**/*.sln'
- name: NUGET_PACKAGES
  value: $(Pipeline.Workspace)/.nuget/packages
- name: isMasterBranch
  value: $[ eq(variables['Build.SourceBranch'], 'refs/heads/master') ]
  # Use this when needing to test the publishing on a PR
  # value: 'true'

stages:
- stage: Build
  jobs:

  - job: Test
    displayName: Test
    variables:
      targetFramework: net9.0-windows
      # Note: the SonarCloud analysis cannot be published from PRs originated from forks due to the variable
      # group being secret. To run it for this repo's PRs only, check System.PullRequest.IsFork. Otherwise,
      # it is just simpler / faster to run it for the master branch only
      coverage: $(isMasterBranch)
      sonarCloud: $(isMasterBranch)
      # Use this when needing code coverage / the SonarCloud analysis on a PR
      #coverage: true
      #sonarCloud: true

    steps:
    - template: build.yml
      parameters:
        targetFramework: $(targetFramework)

  - job: Certificate
    condition: eq(variables['isMasterBranch'], 'true')
    steps:
    - task: PowerShell@2
      name: GenerateCertificate
      displayName: 'Generate Self-Signed Certificate'
      inputs:
        pwsh: true
        targetType: 'filePath'
        filePath: '$(Build.SourcesDirectory)/build/Scripts/New-Certificate.ps1'
        arguments: >-
          -Subject 'OfficeRibbonXEditor'
          -FriendlyName 'Office RibbonX Editor'
          -VariableName 'PfxCertificate'
          -CertificatePassword '$(CODESIGN_PASSWORD)'
          -PublicKeyPath '$(Build.ArtifactStagingDirectory)/CodeSigningCertificate.cer'
          -Base64Signer '$(CODESIGN_SIGNER)'
          -SignerPassword '$(CODESIGN_SIGNER_PASSWORD)'

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Certificate'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/CodeSigningCertificate.cer' 
        artifactName: 'Code Signing Certificate'

  - job: ReleaseScripts
    displayName: Publish Release Scripts
    condition: and(succeeded(), eq(variables['isMasterBranch'], 'true'))
    steps:
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Release Scripts'
      inputs:
        targetPath: '$(Build.SourcesDirectory)/build/Scripts/ReleaseScripts' 
        artifactName: 'ReleaseScripts'

- stage: Publish
  condition: and(succeeded(), eq(variables['isMasterBranch'], 'true'))
  dependsOn: Build
  jobs:

  - template: publish.yml
    parameters:
      jobName: 'FrameworkDependent_x64'
      jobDisplayName: 'Framework Dependent - x64'
      artifactName: 'Framework Dependent - x64'
      selfContained: false
      architecture: x64
        
  - template: publish.yml
    parameters:
      jobName: 'FrameworkDependent_arm64'
      jobDisplayName: 'Framework Dependent - arm64'
      artifactName: 'Framework Dependent - arm64'
      selfContained: false
      architecture: arm64

  - template: publish.yml
    parameters:
      jobName: 'SelfContained_x64'
      jobDisplayName: 'Self-Contained - x64'
      artifactName: 'Self-Contained - x64'
      selfContained: true
      architecture: x64

  - template: publish.yml
    parameters:
      jobName: 'SelfContained_arm64'
      jobDisplayName: 'Self-Contained - arm64'
      artifactName: 'Self-Contained - arm64'
      selfContained: true
      architecture: arm64
  
- stage: Release
  dependsOn: Publish
  condition: and(succeeded(), eq(variables['isMasterBranch'], 'true'))

  jobs:
  - deployment: Deploy
    environment: Release
    strategy:
      runOnce:
        deploy:
          steps:
          
          - task: PowerShell@2
            displayName: 'Pre-release checks'
            inputs:
              pwsh: true
              targetType: 'filePath'
              filePath: '$(Pipeline.Workspace)/ReleaseScripts/PreRelease.ps1'
              arguments: >-
                '$(Pipeline.Workspace)'
                '$(CODESIGN_SIGNER)'
                '$(CODESIGN_SIGNER_PASSWORD)'

          - task: ArchiveFiles@2
            displayName: 'Archive framework-dependent arm64 binaries'
            inputs:
              rootFolderOrFile: '$(Pipeline.Workspace)/Framework Dependent - arm64 - Binaries'
              includeRootFolder: false
              archiveFile: '$(Build.ArtifactStagingDirectory)/OfficeRibbonXEditor.framework-dependent.arm64.zip'
          - pwsh: >-
              Copy-Item
              -Path "$(Pipeline.Workspace)/Framework Dependent - arm64 - Installer/OfficeRibbonXEditor.exe"
              -Destination "$(Build.ArtifactStagingDirectory)/OfficeRibbonXEditor.framework-dependent.arm64.installer.exe"
            displayName: 'Copy framework-dependent arm64 installer'

          - task: ArchiveFiles@2
            displayName: 'Archive framework-dependent x64 binaries'
            inputs:
              rootFolderOrFile: '$(Pipeline.Workspace)/Framework Dependent - x64 - Binaries'
              includeRootFolder: false
              archiveFile: '$(Build.ArtifactStagingDirectory)/OfficeRibbonXEditor.framework-dependent.x64.zip'
          - pwsh: >-
              Copy-Item
              -Path "$(Pipeline.Workspace)/Framework Dependent - x64 - Installer/OfficeRibbonXEditor.exe"
              -Destination "$(Build.ArtifactStagingDirectory)/OfficeRibbonXEditor.framework-dependent.x64.installer.exe"
            displayName: 'Copy framework-dependent x64 installer'

          - task: ArchiveFiles@2
            displayName: 'Archive self-contained arm64 binaries'
            inputs:
              rootFolderOrFile: '$(Pipeline.Workspace)/Self-Contained - arm64 - Binaries'
              includeRootFolder: false
              archiveFile: '$(Build.ArtifactStagingDirectory)/OfficeRibbonXEditor.self-contained.arm64.zip'
          - pwsh: >-
              Copy-Item
              -Path "$(Pipeline.Workspace)/Self-Contained - arm64 - Installer/OfficeRibbonXEditor.exe"
              -Destination "$(Build.ArtifactStagingDirectory)/OfficeRibbonXEditor.self-contained.arm64.installer.exe"
            displayName: 'Copy self-contained arm64 installer'

          - task: ArchiveFiles@2
            displayName: 'Archive self-contained x64 binaries'
            inputs:
              rootFolderOrFile: '$(Pipeline.Workspace)/Self-Contained - x64 - Binaries'
              includeRootFolder: false
              archiveFile: '$(Build.ArtifactStagingDirectory)/OfficeRibbonXEditor.self-contained.x64.zip'
          - pwsh: >-
              Copy-Item
              -Path "$(Pipeline.Workspace)/Self-Contained - x64 - Installer/OfficeRibbonXEditor.exe"
              -Destination "$(Build.ArtifactStagingDirectory)/OfficeRibbonXEditor.self-contained.x64.installer.exe"
            displayName: 'Copy self-contained x64 installer'

          - task: GitHubRelease@1
            displayName: 'Create GitHub Release'
            inputs:
              gitHubConnection: 'fernandreu-pat'
              repositoryName: 'fernandreu/office-ribbonx-editor'
              tagSource: userSpecifiedTag
              tag: 'v$(ThreeDigitVersion).$(Build.BuildId)'
              title: 'Office RibbonX Editor $(ThreeDigitVersion) (Build $(Build.BuildId))'
              releaseNotesSource: inline
              releaseNotesInline: |
                Released automatically from [Azure Pipelines](https://dev.azure.com/fernandreu-public/OfficeRibbonXEditor/_build/results?buildId=$(Build.BuildId))
                
                ## What's New
                
                For a full list of closed issues since last release, see below. 
                
                ## How to install / use
                
                Download one of the items from the `Assets` section below. If in doubt, I would
                recommend using the self-contained installer.

                There are two types of downloads available:

                - **Binaries:** These are just a `.zip` file ready to be extracted, with no
                  installation necessary. No entry will be created in the control panel's program
                  list
                - **Installers:** A typical self-extracting installer which will require admin
                  rights
                
                For each of those download types, there are two variants:

                - **Framework-dependent:** This requires at least version 9.0 of the
                  [.NET Runtime](https://dotnet.microsoft.com/download/dotnet/current/runtime)
                  installed (the one for desktop apps is enough)
                - **Self-contained:** For these, the .NET runtime is included with the
                  installation, so you won't need to install anything else. As a drawback, the
                  resulting tool is much larger in file size
                  
                **Starting from version 2.0, .NET Framework is no longer supported. For more
                information, see #188.**

              assets: '$(Build.ArtifactStagingDirectory)/*.*'
              isPreRelease: true
              changeLogType: issueBased
              changeLogLabels: '[{ "label" : "enhancement", "displayName" : "Enhancements", "state" : "closed" }, { "label" : "bug", "displayName" : "Bugs", "state" : "closed" }]'
