
trigger:
  branches:
    include:
    - master
    - 'feature/*'
  tags:
    exclude:
    - 'v*'
  paths:
    exclude:
    - LICENSE
    - THIRD-PARTY-NOTICES
    - '**/*.md'

pool:
  vmImage: 'windows-2019'

variables:
- group: GitHubPATGroup
- group: CodeSign
- group: SonarCloud
- name: solution
  value: '**/*.sln'
- name: NUGET_PACKAGES
  value: $(Pipeline.Workspace)/.nuget/packages

stages:
- stage: Build
  jobs:
  - job: NetFramework
    displayName: .NET Framework
    variables:
      targetFramework: net461

    steps:

    - task: Cache@2
      displayName: 'Cache NuGet packages'
      inputs:
        key: 'nuget | "$(Agent.OS)" | ".NET Framework" | src/OfficeRibbonXEditor/packages.lock.json'
        path: '$(NUGET_PACKAGES)'
        restoreKeys: |
          nuget | "$(Agent.OS)" | ".NET Framework"
          nuget | "$(Agent.OS)"
          nuget

    - task: PowerShell@2
      displayName: 'Run pre-build script'
      inputs:
        targetType: 'filePath'
        filePath: 'build/PreBuild.ps1'
        arguments: '"$(Build.BuildId)"'

    - task: NuGetToolInstaller@0
      displayName: 'Install NuGet'

    - task: NuGetCommand@2
      displayName: 'NuGet restore'
      inputs:
        restoreSolution: '$(solution)'

    - task: VSBuild@1
      displayName: 'Build solution'
      inputs:
        solution: '$(solution)'
        platform: '$(buildPlatform)'
        msbuildArgs: '/p:TargetFramework=$(targetFramework) /p:_InstallerTargetFramework=$(targetFramework)'
        configuration: '$(buildConfiguration)'

    - task: VSTest@2
      displayName: 'Run Tests'
      condition: not(startsWith(variables['targetFramework'], 'netcoreapp'))
      inputs:
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'

    - template: build/templates/copy-and-publish.yml
      parameters:
        displayName: '.NET Framework Executable'
        fileName: 'OfficeRibbonXEditor.exe'
        project: 'OfficeRibbonXEditor'

    - script: >-
        iscc build/install/setup.iss
        /DVersionPrefix="$(VersionPrefix)"
        /DInputFolder="../../src/OfficeRibbonXEditor/bin/$(buildConfiguration)/$(targetFramework)"
        /DOutputFolder="../../src/OfficeRibbonXEditor/bin/Installer/$(targetFramework)"
      displayName: Generate installer

    - template: build/templates/copy-and-publish.yml
      parameters:
        displayName: '.NET Framework Installer'
        fileName: 'OfficeRibbonXEditor.exe'
        binFolder: 'Installer'

  - job: NetCore
    displayName: .NET Core
    variables:
      targetFramework: netcoreapp3.1

    steps:

    - task: Cache@2
      displayName: 'Cache NuGet packages'
      inputs:
        key: 'nuget | "$(Agent.OS)" | ".NET Core" | src/OfficeRibbonXEditor/packages.lock.json'
        restoreKeys: |
          nuget | "$(Agent.OS)" | ".NET Core"
          nuget | "$(Agent.OS)"
          nuget
        path: $(NUGET_PACKAGES)
      
    - task: PowerShell@2
      displayName: 'Run pre-build script'
      inputs:
        targetType: 'filePath'
        filePath: 'build/PreBuild.ps1'
        arguments: '"$(Build.BuildId)"'

    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk'
      inputs:
        packageType: sdk
        version: 3.1.100

    - task: SonarCloudPrepare@1
      displayName: 'Prepare SonarCloud analysis'
      inputs:
        SonarCloud: 'fernandreu-SonarCloud'
        organization: '$(SonarOrganization)'
        scannerMode: 'MSBuild'
        projectKey: '$(SonarProjectKey)'
        projectName: '$(SonarProjectName)'
        projectVersion: '$(Build.BuildNumber)'
        extraProperties: |
          sonar.cs.vstest.reportsPaths=$(Agent.TempDirectory)/*.trx
          sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/TestResults/CodeCoverage/coverage.$(targetFramework).opencover.xml

    - task: DotNetCoreCLI@2
      displayName: 'Build solution'
      inputs:
        command: build
        projects: '**/*.csproj'
        arguments: '--configuration $(buildConfiguration) -p:TargetFramework=$(targetFramework) -p:_InstallerTargetFramework=$(targetFramework)'

    # This task is necessary for coverlet to work with the OfficeRibbonXEditor project correctly.
    # See: https://github.com/tonerdo/coverlet/blob/master/Documentation/KnowIssues.md#4-failed-to-resolve-assembly-during-instrumentation
    - task: PowerShell@2
      displayName: 'Copy PresentationFramework.dll to test folders'
      inputs:
        targetType: 'filePath'
        filePath: 'build/CopyLibraries.ps1'
        arguments: '"$(buildConfiguration)" "$(targetFramework)"'

    - task: DotNetCoreCLI@2
      displayName: 'Run Tests'
      inputs:
        command: test
        projects: '**/*Tests.csproj'
        arguments: >-
          --no-build
          --configuration $(buildConfiguration)
          /p:TargetFramework=$(targetFramework)
          /p:_InstallerTargetFramework=$(targetFramework)
          /p:CollectCoverage=true
          /p:Exclude=[Scintilla*]*
          /p:IncludeTestAssembly=true
          /p:CoverletOutputFormat=json%2Ccobertura%2Copencover
          /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/CodeCoverage/
          /p:mergeWith=$(Build.SourcesDirectory)/TestResults/CodeCoverage/coverage.$(targetFramework).json

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage report'
      inputs:
        codeCoverageTool: 'cobertura'
        summaryFileLocation: '$(Build.SourcesDirectory)/TestResults/**/coverage.$(targetFramework).cobertura.xml'

    - task: SonarCloudAnalyze@1
      displayName: 'Run SonarCloud code analysis'

    - task: SonarCloudPublish@1
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      displayName: 'Publish SonarCloud quality gate results'

    - task: DotNetCoreCLI@2
      displayName: 'Prepare app package (dotnet publish)'
      inputs:
        command: publish
        projects: '**/OfficeRibbonXEditor.csproj'
        publishWebProjects: false
        zipAfterPublish: false
        arguments: '--configuration $(buildConfiguration) -p:TargetFramework=$(targetFramework) -p:_InstallerTargetFramework=$(targetFramework) --output $(Build.ArtifactStagingDirectory)'

    - task: PublishPipelineArtifact@1
      displayName: 'Publish binaries (unsigned)'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)' 
        artifactName: '.NET Core Binaries (Unsigned)'

    - script: >-
        iscc build/install/setup.iss
        /DVersionPrefix="$(VersionPrefix)"
        /DInputFolder="../../src/OfficeRibbonXEditor/bin/$(buildConfiguration)/$(targetFramework)"
        /DOutputFolder="../../src/OfficeRibbonXEditor/bin/Installer/$(targetFramework)"
      displayName: Generate installer

    - template: build/templates/copy-and-publish.yml
      parameters:
        displayName: '.NET Core Installer'
        fileName: 'OfficeRibbonXEditor.exe'
        binFolder: 'Installer'

  - job: ReleaseScripts
    displayName: Publish Release Scripts
    steps:
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Release Scripts'
      inputs:
        targetPath: 'build/ReleaseScripts' 
        artifactName: 'ReleaseScripts'

- stage: Sign
  dependsOn: Build
  pool:
    name: default
    demands: CodeSign
  jobs:

  - job: NetFrameworkExecutable
    displayName: Sign .NET Framework Executable
    workspace:
      clean: all
    steps:
    - template: build/templates/sign-and-publish.yml
      parameters:
        artifactName: '.NET Framework Executable'

  - job: NetFrameworkInstaller
    displayName: Sign .NET Framework Installer
    workspace:
      clean: all
    steps:
    - template: build/templates/sign-and-publish.yml
      parameters:
        artifactName: '.NET Framework Installer'

  - job: NetCoreBinaries
    displayName: Sign .NET Core Binaries
    workspace:
      clean: all
    steps:
    - template: build/templates/sign-and-publish.yml
      parameters:
        artifactName: '.NET Core Binaries'

  - job: NetCoreInstaller
    displayName: Sign .NET Core Installer
    workspace:
      clean: all
    steps:
    - template: build/templates/sign-and-publish.yml
      parameters:
        artifactName: '.NET Core Installer'
