parameters:
- name: createRelease
  displayName: Create GitHub Release
  default: false
  type: boolean

trigger:
  branches:
    include:
    - master
    - 'feature/*'
  tags:
    exclude:
    - 'v*'
  paths:
    exclude:
    - LICENSE
    - THIRD-PARTY-NOTICES
    - '**/*.md'

pool:
  vmImage: 'windows-2019'

variables:
- group: GitHubPATGroup
- group: CodeSign
- group: SonarCloud
- name: solution
  value: '**/*.sln'
- name: NUGET_PACKAGES
  value: $(Pipeline.Workspace)/.nuget/packages

stages:
- stage: Build
  jobs:
  - job: NetFramework
    displayName: .NET Framework
    variables:
      targetFramework: net461

    steps:

    - task: Cache@2
      displayName: 'Cache NuGet packages'
      inputs:
        key: 'nuget | "$(Agent.OS)" | ".NET Framework" | src/OfficeRibbonXEditor/packages.lock.json'
        path: '$(NUGET_PACKAGES)'
        restoreKeys: |
          nuget | "$(Agent.OS)" | ".NET Framework"
          nuget | "$(Agent.OS)"
          nuget

    - task: PowerShell@2
      displayName: 'Run pre-build script'
      inputs:
        targetType: 'filePath'
        filePath: 'build/PreBuild.ps1'
        arguments: '"$(Build.BuildId)"'

    - task: NuGetToolInstaller@0
      displayName: 'Install NuGet'

    - task: NuGetCommand@2
      displayName: 'NuGet restore'
      inputs:
        restoreSolution: '$(solution)'

    - task: VSBuild@1
      displayName: 'Build solution'
      inputs:
        solution: '$(solution)'
        platform: '$(buildPlatform)'
        msbuildArgs: '/p:TargetFramework=$(targetFramework) /p:_InstallerTargetFramework=$(targetFramework)'
        configuration: '$(buildConfiguration)'

    - task: VSTest@2
      displayName: 'Run Tests'
      condition: not(startsWith(variables['targetFramework'], 'netcoreapp'))
      inputs:
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'

    - template: build/templates/copy-and-publish.yml
      parameters:
        displayName: '.NET Framework Executable'
        fileName: 'OfficeRibbonXEditor.exe'
        project: 'OfficeRibbonXEditor'

    - script: >-
        iscc build/install/setup.iss
        /DAssemblyName="$(ExtractedAssemblyName)"
        /DAssemblyTitle="$(ExtractedAssemblyTitle)"
        /DAuthors="$(ExtractedAuthors)"
        /DProjectUrl="$(ExtractedPackageProjectUrl)"
        /DDescription="$(ExtractedDescription)"
        /DCopyright="$(ExtractedCopyright)"
        /DVersionPrefix="$(ExtractedVersionPrefix)"
        /DInputFolder="../../src/OfficeRibbonXEditor/bin/$(buildConfiguration)/$(targetFramework)"
        /DOutputFolder="../../src/OfficeRibbonXEditor/bin/Installer/$(targetFramework)"
      displayName: Generate installer

    - template: build/templates/copy-and-publish.yml
      parameters:
        displayName: '.NET Framework Installer'
        fileName: 'OfficeRibbonXEditor.exe'
        binFolder: 'Installer'

  - job: NetCore
    displayName: .NET Core
    variables:
      targetFramework: netcoreapp3.1

    steps:

    - task: Cache@2
      displayName: 'Cache NuGet packages'
      inputs:
        key: 'nuget | "$(Agent.OS)" | ".NET Core" | src/OfficeRibbonXEditor/packages.lock.json'
        restoreKeys: |
          nuget | "$(Agent.OS)" | ".NET Core"
          nuget | "$(Agent.OS)"
          nuget
        path: $(NUGET_PACKAGES)
      
    - task: PowerShell@2
      displayName: 'Run pre-build script'
      inputs:
        targetType: 'filePath'
        filePath: 'build/PreBuild.ps1'
        arguments: '"$(Build.BuildId)"'

    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk'
      inputs:
        packageType: sdk
        version: 3.1.100

    - task: SonarCloudPrepare@1
      displayName: 'Prepare SonarCloud analysis'
      inputs:
        SonarCloud: 'fernandreu-SonarCloud'
        organization: '$(SonarOrganization)'
        scannerMode: 'MSBuild'
        projectKey: '$(SonarProjectKey)'
        projectName: '$(SonarProjectName)'
        projectVersion: '$(Build.BuildNumber)'
        extraProperties: |
          sonar.cs.vstest.reportsPaths=$(Agent.TempDirectory)/*.trx
          sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/TestResults/CodeCoverage/coverage.$(targetFramework).opencover.xml

    - task: DotNetCoreCLI@2
      displayName: 'Build solution'
      inputs:
        command: build
        projects: '**/*.csproj'
        arguments: '--configuration $(buildConfiguration) -p:TargetFramework=$(targetFramework) -p:_InstallerTargetFramework=$(targetFramework)'

    # This task is necessary for coverlet to work with the OfficeRibbonXEditor project correctly.
    # See: https://github.com/tonerdo/coverlet/blob/master/Documentation/KnowIssues.md#4-failed-to-resolve-assembly-during-instrumentation
    - task: PowerShell@2
      displayName: 'Copy PresentationFramework.dll to test folders'
      inputs:
        targetType: 'filePath'
        filePath: 'build/CopyLibraries.ps1'
        arguments: '"$(buildConfiguration)" "$(targetFramework)"'

    - task: DotNetCoreCLI@2
      displayName: 'Run Tests'
      inputs:
        command: test
        projects: '**/*Tests.csproj'
        arguments: >-
          --no-build
          --configuration $(buildConfiguration)
          /p:TargetFramework=$(targetFramework)
          /p:_InstallerTargetFramework=$(targetFramework)
          /p:CollectCoverage=true
          /p:Exclude=[Scintilla*]*
          /p:IncludeTestAssembly=true
          /p:CoverletOutputFormat=json%2Ccobertura%2Copencover
          /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/CodeCoverage/
          /p:mergeWith=$(Build.SourcesDirectory)/TestResults/CodeCoverage/coverage.$(targetFramework).json

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage report'
      inputs:
        codeCoverageTool: 'cobertura'
        summaryFileLocation: '$(Build.SourcesDirectory)/TestResults/**/coverage.$(targetFramework).cobertura.xml'

    - task: SonarCloudAnalyze@1
      displayName: 'Run SonarCloud code analysis'

    - task: SonarCloudPublish@1
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      displayName: 'Publish SonarCloud quality gate results'

    - task: DotNetCoreCLI@2
      displayName: 'Prepare app package (dotnet publish)'
      inputs:
        command: publish
        projects: '**/OfficeRibbonXEditor.csproj'
        publishWebProjects: false
        zipAfterPublish: false
        arguments: '--configuration $(buildConfiguration) -p:TargetFramework=$(targetFramework) -p:_InstallerTargetFramework=$(targetFramework) --output $(Build.ArtifactStagingDirectory)'

    - task: PublishPipelineArtifact@1
      displayName: 'Publish binaries (unsigned)'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)' 
        artifactName: '.NET Core Binaries (Unsigned)'

    - script: >-
        iscc build/install/setup.iss
        /DAssemblyName="$(ExtractedAssemblyName)"
        /DAssemblyTitle="$(ExtractedAssemblyTitle)"
        /DAuthors="$(ExtractedAuthors)"
        /DProjectUrl="$(ExtractedPackageProjectUrl)"
        /DDescription="$(ExtractedDescription)"
        /DCopyright="$(ExtractedCopyright)"
        /DVersionPrefix="$(ExtractedVersionPrefix)"
        /DInputFolder="../../src/OfficeRibbonXEditor/bin/$(buildConfiguration)/$(targetFramework)"
        /DOutputFolder="../../src/OfficeRibbonXEditor/bin/Installer/$(targetFramework)"
      displayName: Generate installer

    - template: build/templates/copy-and-publish.yml
      parameters:
        displayName: '.NET Core Installer'
        fileName: 'OfficeRibbonXEditor.exe'
        binFolder: 'Installer'

  - job: ReleaseScripts
    displayName: Publish Release Scripts
    steps:
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Release Scripts'
      inputs:
        targetPath: 'build/ReleaseScripts' 
        artifactName: 'ReleaseScripts'

- stage: Sign
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  pool:
    name: default
    demands: CodeSign
  jobs:

  - job: NetFrameworkExecutable
    displayName: Sign .NET Framework Executable
    workspace:
      clean: all
    steps:
    - template: build/templates/sign-and-publish.yml
      parameters:
        artifactName: '.NET Framework Executable'

  - job: NetFrameworkInstaller
    displayName: Sign .NET Framework Installer
    workspace:
      clean: all
    steps:
    - template: build/templates/sign-and-publish.yml
      parameters:
        artifactName: '.NET Framework Installer'

  - job: NetCoreBinaries
    displayName: Sign .NET Core Binaries
    workspace:
      clean: all
    steps:
    - template: build/templates/sign-and-publish.yml
      parameters:
        artifactName: '.NET Core Binaries'

  - job: NetCoreInstaller
    displayName: Sign .NET Core Installer
    workspace:
      clean: all
    steps:
    - template: build/templates/sign-and-publish.yml
      parameters:
        artifactName: '.NET Core Installer'

- ${{ if eq(parameters.createRelease, true) }}:
  - stage: Release
    dependsOn: Sign
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

    jobs:
    - deployment: Deploy
      environment: Release
      strategy:
        runOnce:
          deploy:
            steps:
            
            - task: PowerShell@2
              displayName: 'Check Version'
              inputs:
                targetType: 'filePath'
                filePath: '$(Pipeline.Workspace)/ReleaseScripts/PreRelease.ps1'
                arguments: '"$(Pipeline.Workspace)"'

            - task: ArchiveFiles@2
              displayName: 'Archive .NET Framework Executable'
              inputs:
                rootFolderOrFile: '$(Pipeline.Workspace)/.NET Framework Executable/OfficeRibbonXEditor.exe'
                includeRootFolder: false
                archiveFile: '$(Build.ArtifactStagingDirectory)/OfficeRibbonXEditor-NETFramework.zip'
            - powershell: >-
                Copy-Item
                -Path "$(Pipeline.Workspace)/.NET Framework Installer/OfficeRibbonXEditor.exe"
                -Destination "$(Build.ArtifactStagingDirectory)/OfficeRibbonXEditor-Installer-NETFramework.exe"
              displayName: 'Copy .NET Framework Installer'
            - task: ArchiveFiles@2
              displayName: 'Archive .NET Core Binaries'
              inputs:
                rootFolderOrFile: '$(Pipeline.Workspace)/.NET Core Binaries/OfficeRibbonXEditor'
                includeRootFolder: false
                archiveFile: '$(Build.ArtifactStagingDirectory)/OfficeRibbonXEditor-NETCore.zip'
            - powershell: >-
                Copy-Item
                -Path "$(Pipeline.Workspace)/.NET Core Installer/OfficeRibbonXEditor.exe"
                -Destination "$(Build.ArtifactStagingDirectory)/OfficeRibbonXEditor-Installer-NETCore.exe"
              displayName: 'Copy .NET Core Installer'
            - task: GitHubRelease@1
              displayName: 'Create GitHub Release'
              inputs:
                gitHubConnection: 'fernandreu-pat'
                repositoryName: 'fernandreu/office-ribbonx-editor'
                tagSource: userSpecifiedTag
                tag: 'v$(ThreeDigitVersion)'
                title: 'Office RibbonX Editor $(ThreeDigitVersion) (Build $(Build.BuildId))'
                releaseNotesSource: inline
                releaseNotesInline: |
                  Released automatically from [Azure Pipelines](https://dev.azure.com/fernandreu-public/OfficeRibbonXEditor/_build/results?buildId=$(Build.BuildId))
                  
                  ## What's New
                  
                  For a full list of closed issues since last release, see below. 
                  
                  ## How to install / use
                  
                  Download one of the items from the `Assets` section below.
                  
                  Compressed `.zip` files do not require installation (i.e. will not create any
                  entry in the control panel's program list). When feasible, these will contain
                  a single `.exe` file.
                  
                  The .NET Framework builds require at least version 4.6.1 of the .NET Framework
                  Runtime. The .NET Core builds are still experimental and require at least
                  version 3.0 of the .NET Core Runtime (the one for desktop apps is enough). If
                  you need any of these runtimes, check [Microsoft's .NET download page](https://dotnet.microsoft.com/download).
                  
                  **Note: As of version 1.6, both the installer and executable are cryptographically
                  signed. In the long therm, this should prevent security warnings in Windows due
                  to untrusted software being executed (see #74). This will not take effect immediately,
                  as it is a reputation system based on the number of downloads. Similarly, when
                  attempting to download the assets, some browsers might show warning messages
                  indicating these are not commonly downloaded, but it is completely safe to do so.**
                assets: '$(Build.ArtifactStagingDirectory)/*.*'
                isDraft: true
                changeLogType: issueBased
                changeLogLabels: '[{ "label" : "enhancement", "displayName" : "Enhancements", "state" : "closed" }, { "label" : "bug", "displayName" : "Bugs", "state" : "closed" }]'
