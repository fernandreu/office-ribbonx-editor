<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="About.Author" xml:space="preserve">
    <value>Author:</value>
  </data>
  <data name="About.Close" xml:space="preserve">
    <value>Close</value>
  </data>
  <data name="About.CopyVersion" xml:space="preserve">
    <value>Copy version information</value>
  </data>
  <data name="About.License" xml:space="preserve">
    <value>License:</value>
  </data>
  <data name="About.OperatingSystem" xml:space="preserve">
    <value>Operating System:</value>
  </data>
  <data name="About.Paragraph1" xml:space="preserve">
    <value>Office RibbonX Editor is a free, open source, standalone tool to edit the Custom UI part of Office open document file format. It contains both Office 2007 and Office 2010 custom UI schemas.</value>
  </data>
  <data name="About.Paragraph2" xml:space="preserve">
    <value>The Office 2010 custom UI schema is the latest schema and it's still being used in the latest versions of Office including Office 2013, Office 2016, Office 2019 and Office 365.</value>
  </data>
  <data name="About.ProjectPage" xml:space="preserve">
    <value>Project Page:</value>
  </data>
  <data name="About.Runtime" xml:space="preserve">
    <value>Runtime:</value>
  </data>
  <data name="About.SubmitIssue" xml:space="preserve">
    <value>Submit an issue</value>
  </data>
  <data name="About.Title" xml:space="preserve">
    <value>About Office RibbonX Editor</value>
  </data>
  <data name="About.Version" xml:space="preserve">
    <value>Version:</value>
  </data>
  <data name="Callbacks.Title" xml:space="preserve">
    <value>Callbacks Viewer</value>
  </data>
  <data name="ContextMenu.TreeView.ChangeId" xml:space="preserve">
    <value>Change ID</value>
  </data>
  <data name="ContextMenu.TreeView.Close" xml:space="preserve">
    <value>Close</value>
  </data>
  <data name="ContextMenu.TreeView.InsertIcons" xml:space="preserve">
    <value>Insert Icons...</value>
  </data>
  <data name="ContextMenu.TreeView.InsertOffice2007" xml:space="preserve">
    <value>Insert Office 2007 Custom UI Part</value>
  </data>
  <data name="ContextMenu.TreeView.InsertOffice2010" xml:space="preserve">
    <value>Insert Office 2010+ Custom UI Part</value>
  </data>
  <data name="ContextMenu.TreeView.Open" xml:space="preserve">
    <value>Open</value>
  </data>
  <data name="ContextMenu.TreeView.Remove" xml:space="preserve">
    <value>Remove</value>
  </data>
  <data name="ContextMenu.TreeView.Save" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="ContextMenu.TreeView.SaveAs" xml:space="preserve">
    <value>Save As...</value>
  </data>
  <data name="Editor.ZoomFactor" xml:space="preserve">
    <value>Zoom Factor:</value>
  </data>
  <data name="Exception.CloseDialog" xml:space="preserve">
    <value>Close this Dialog</value>
  </data>
  <data name="Exception.Disclaimer" xml:space="preserve">
    <value>If you keep using the tool after this exception, it might start to malfunction.</value>
  </data>
  <data name="Exception.ShutdownApp" xml:space="preserve">
    <value>Shutdown Application</value>
  </data>
  <data name="Exception.SubmitBug" xml:space="preserve">
    <value>Submit Bug Report</value>
  </data>
  <data name="Exception.Title" xml:space="preserve">
    <value>Unhandled Exception Occurred</value>
  </data>
  <data name="Filter.All" xml:space="preserve">
    <value>All Files (*.*)|*.*</value>
  </data>
  <data name="Filter.AllOfficeDocuments" xml:space="preserve">
    <value>All Office Documents|*.???x;*.???m</value>
  </data>
  <data name="Filter.ExcelDocuments" xml:space="preserve">
    <value>Microsoft Excel Workbooks|*.xlsx;*.xlsm;*.xlam;*.xltx;*.xltm</value>
  </data>
  <data name="Filter.Icons" xml:space="preserve">
    <value>Supported Icons|*.ico;*.bmp;*.png;*.jpg;*.tif</value>
  </data>
  <data name="Filter.PowerPointDocuments" xml:space="preserve">
    <value>Microsoft PowerPoint Presentations|*.pp?x;*.pp?m;*.potx;*.potm;*.thmx</value>
  </data>
  <data name="Filter.SaveAs0" xml:space="preserve">
    <value>Excel Workbook|*.xlsx</value>
  </data>
  <data name="Filter.SaveAs1" xml:space="preserve">
    <value>Excel Macro-Enabled Workbook|*.xlsm</value>
  </data>
  <data name="Filter.SaveAs10" xml:space="preserve">
    <value>PowerPoint Show|*.ppsx</value>
  </data>
  <data name="Filter.SaveAs11" xml:space="preserve">
    <value>PowerPoint Macro-Enabled Show|*.ppsm</value>
  </data>
  <data name="Filter.SaveAs12" xml:space="preserve">
    <value>PowerPoint Add-in|*.ppam</value>
  </data>
  <data name="Filter.SaveAs13" xml:space="preserve">
    <value>Word Document|*.docx</value>
  </data>
  <data name="Filter.SaveAs14" xml:space="preserve">
    <value>Word Macro-Enabled Document|*.docm</value>
  </data>
  <data name="Filter.SaveAs15" xml:space="preserve">
    <value>Word Template|*.dotx</value>
  </data>
  <data name="Filter.SaveAs16" xml:space="preserve">
    <value>Word Macro-Enabled Template|*.dotm</value>
  </data>
  <data name="Filter.SaveAs2" xml:space="preserve">
    <value>Excel Binary Workbook|*.xlsb</value>
  </data>
  <data name="Filter.SaveAs3" xml:space="preserve">
    <value>Excel Template|*.xltx</value>
  </data>
  <data name="Filter.SaveAs4" xml:space="preserve">
    <value>Excel Macro-Enabled Template|*.xltm</value>
  </data>
  <data name="Filter.SaveAs5" xml:space="preserve">
    <value>Excel Add-in|*.xlam</value>
  </data>
  <data name="Filter.SaveAs6" xml:space="preserve">
    <value>PowerPoint Presentation|*.pptx</value>
  </data>
  <data name="Filter.SaveAs7" xml:space="preserve">
    <value>PowerPoint Macro-Enabled Presentation|*.pptm</value>
  </data>
  <data name="Filter.SaveAs8" xml:space="preserve">
    <value>PowerPoint Template|*.potx</value>
  </data>
  <data name="Filter.SaveAs9" xml:space="preserve">
    <value>PowerPoint Macro-Enabled Template|*.potm</value>
  </data>
  <data name="Filter.WordDocuments" xml:space="preserve">
    <value>Microsoft Word Documents|*.do?x;*.do?m</value>
  </data>
  <data name="FindReplace.Find" xml:space="preserve">
    <value>_Find</value>
  </data>
  <data name="FindReplace.FindAll" xml:space="preserve">
    <value>Find All</value>
  </data>
  <data name="FindReplace.FindAll.Clear" xml:space="preserve">
    <value>C_lear</value>
  </data>
  <data name="FindReplace.FindAll.HighlightMatches" xml:space="preserve">
    <value>_Highlight Matches</value>
  </data>
  <data name="FindReplace.FindAll.MarkLine" xml:space="preserve">
    <value>_Mark Line</value>
  </data>
  <data name="FindReplace.FindAll.Ok" xml:space="preserve">
    <value>Find _All</value>
  </data>
  <data name="FindReplace.FindNext" xml:space="preserve">
    <value>Find Next</value>
  </data>
  <data name="FindReplace.FindPrevious" xml:space="preserve">
    <value>Find Previous</value>
  </data>
  <data name="FindReplace.FindTab" xml:space="preserve">
    <value>Find</value>
  </data>
  <data name="FindReplace.Options" xml:space="preserve">
    <value>Options</value>
  </data>
  <data name="FindReplace.Options.Compiled" xml:space="preserve">
    <value>_Compiled</value>
  </data>
  <data name="FindReplace.Options.ECMAScript" xml:space="preserve">
    <value>ECMAScript</value>
  </data>
  <data name="FindReplace.Options.ExplicitCapture" xml:space="preserve">
    <value>E_xplicit Capture</value>
  </data>
  <data name="FindReplace.Options.IgnoreCase" xml:space="preserve">
    <value>I_gnore Case</value>
  </data>
  <data name="FindReplace.Options.IgnoreWhitespace" xml:space="preserve">
    <value>Ignore Pattern Whitespace</value>
  </data>
  <data name="FindReplace.Options.Invariant" xml:space="preserve">
    <value>C_ulture Invariant</value>
  </data>
  <data name="FindReplace.Options.Multiline" xml:space="preserve">
    <value>Multiline</value>
  </data>
  <data name="FindReplace.Options.RightToLeft" xml:space="preserve">
    <value>Right To Left</value>
  </data>
  <data name="FindReplace.Options.Singleline" xml:space="preserve">
    <value>Singleline</value>
  </data>
  <data name="FindReplace.Replace" xml:space="preserve">
    <value>_Replace</value>
  </data>
  <data name="FindReplace.ReplaceAll" xml:space="preserve">
    <value>Replace _All</value>
  </data>
  <data name="FindReplace.ReplaceNext" xml:space="preserve">
    <value>Replace _Next</value>
  </data>
  <data name="FindReplace.ReplacePrevious" xml:space="preserve">
    <value>Replace _Previous</value>
  </data>
  <data name="FindReplace.ReplaceTab" xml:space="preserve">
    <value>Replace</value>
  </data>
  <data name="FindReplace.SearchType" xml:space="preserve">
    <value>Search Type</value>
  </data>
  <data name="FindReplace.SearchType.Extended" xml:space="preserve">
    <value>E_xtended (\n, \r, \t, \0)</value>
  </data>
  <data name="FindReplace.SearchType.Regular" xml:space="preserve">
    <value>Regular _Expression</value>
  </data>
  <data name="FindReplace.SearchType.Standard" xml:space="preserve">
    <value>_Standard</value>
  </data>
  <data name="FindReplace.Selection" xml:space="preserve">
    <value>Search Selection</value>
  </data>
  <data name="FindReplace.Status.NoMatch" xml:space="preserve">
    <value>Match could not be found</value>
  </data>
  <data name="FindReplace.Status.RegExError" xml:space="preserve">
    <value>Error in Regular Expression</value>
  </data>
  <data name="FindReplace.Status.TotalFound" xml:space="preserve">
    <value>Total found</value>
  </data>
  <data name="FindReplace.Status.TotalReplaced" xml:space="preserve">
    <value>Total replaced</value>
  </data>
  <data name="FindReplace.Status.Wrap" xml:space="preserve">
    <value>Search match wrapped to the beginning of the document / selection</value>
  </data>
  <data name="FindReplace.Title" xml:space="preserve">
    <value>Find and Replace</value>
  </data>
  <data name="FindReplace.Wrap" xml:space="preserve">
    <value>_Wrap</value>
  </data>
  <data name="GoTo.Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="GoTo.CurrentLine" xml:space="preserve">
    <value>_Current line number</value>
  </data>
  <data name="GoTo.DesiredLine" xml:space="preserve">
    <value>Go to line number</value>
  </data>
  <data name="GoTo.MaxLine" xml:space="preserve">
    <value>_Maximum line number</value>
  </data>
  <data name="GoTo.Ok" xml:space="preserve">
    <value>OK</value>
  </data>
  <data name="GoTo.Title" xml:space="preserve">
    <value>Go To Line</value>
  </data>
  <data name="MainWindow.Title" xml:space="preserve">
    <value>Office RibbonX Editor</value>
  </data>
  <data name="Menu.Edit" xml:space="preserve">
    <value>_Edit</value>
  </data>
  <data name="Menu.Edit.Copy" xml:space="preserve">
    <value>Copy</value>
  </data>
  <data name="Menu.Edit.Cut" xml:space="preserve">
    <value>Cut</value>
  </data>
  <data name="Menu.Edit.DuplicateLine" xml:space="preserve">
    <value>Duplicate Line</value>
  </data>
  <data name="Menu.Edit.Find" xml:space="preserve">
    <value>Find...</value>
  </data>
  <data name="Menu.Edit.FindNext" xml:space="preserve">
    <value>Find Next</value>
  </data>
  <data name="Menu.Edit.FindPrevious" xml:space="preserve">
    <value>Find Previous</value>
  </data>
  <data name="Menu.Edit.GoTo" xml:space="preserve">
    <value>Go To Line...</value>
  </data>
  <data name="Menu.Edit.Incremental" xml:space="preserve">
    <value>Incremental Search...</value>
  </data>
  <data name="Menu.Edit.Paste" xml:space="preserve">
    <value>Paste</value>
  </data>
  <data name="Menu.Edit.Redo" xml:space="preserve">
    <value>Redo</value>
  </data>
  <data name="Menu.Edit.Replace" xml:space="preserve">
    <value>Replace...</value>
  </data>
  <data name="Menu.Edit.SelectAll" xml:space="preserve">
    <value>Select All</value>
  </data>
  <data name="Menu.Edit.Undo" xml:space="preserve">
    <value>Undo</value>
  </data>
  <data name="Menu.File" xml:space="preserve">
    <value>_File</value>
  </data>
  <data name="Menu.File.Close" xml:space="preserve">
    <value>Close Current Document</value>
  </data>
  <data name="Menu.File.Exit" xml:space="preserve">
    <value>Exit</value>
  </data>
  <data name="Menu.File.Open" xml:space="preserve">
    <value>Open</value>
  </data>
  <data name="Menu.File.Save" xml:space="preserve">
    <value>Save Current Document</value>
  </data>
  <data name="Menu.File.SaveAll" xml:space="preserve">
    <value>Save All Documents</value>
  </data>
  <data name="Menu.File.SaveAs" xml:space="preserve">
    <value>Save As...</value>
  </data>
  <data name="Menu.File.SaveAs.ToolTip" xml:space="preserve">
    <value>Save the current document with a different name</value>
  </data>
  <data name="Menu.FIle.SaveCopy" xml:space="preserve">
    <value>Save a Copy As...</value>
  </data>
  <data name="Menu.File.SaveCopy.ToolTip" xml:space="preserve">
    <value>Save a completely separate copy of the current document</value>
  </data>
  <data name="Menu.File.Settings" xml:space="preserve">
    <value>Settings...</value>
  </data>
  <data name="Menu.Help" xml:space="preserve">
    <value>_Help</value>
  </data>
  <data name="Menu.Help.About" xml:space="preserve">
    <value>About</value>
  </data>
  <data name="Menu.Help.UsefulLinks" xml:space="preserve">
    <value>Useful Links</value>
  </data>
  <data name="Menu.Insert" xml:space="preserve">
    <value>_Insert</value>
  </data>
  <data name="Menu.Insert.Icons" xml:space="preserve">
    <value>Icons...</value>
  </data>
  <data name="Menu.Insert.Office2007" xml:space="preserve">
    <value>Office 2007 Custom UI Part</value>
  </data>
  <data name="Menu.Insert.Office2010" xml:space="preserve">
    <value>Office 2010+ Custom UI Part</value>
  </data>
  <data name="Menu.Insert.Sample" xml:space="preserve">
    <value>Sample XML</value>
  </data>
  <data name="Menu.View" xml:space="preserve">
    <value>_View</value>
  </data>
  <data name="Menu.View.FoldAll" xml:space="preserve">
    <value>Fold All</value>
  </data>
  <data name="Menu.View.FoldCurrent" xml:space="preserve">
    <value>Fold Current Level</value>
  </data>
  <data name="Menu.View.FoldLevel" xml:space="preserve">
    <value>Fold Level</value>
    <comment>The menu title for folding a specific level</comment>
  </data>
  <data name="Menu.View.UnfoldAll" xml:space="preserve">
    <value>Unfold All</value>
  </data>
  <data name="Menu.View.UnfoldCurrent" xml:space="preserve">
    <value>Unfold Current Level</value>
  </data>
  <data name="Menu.View.UnfoldLevel" xml:space="preserve">
    <value>Unfold Level</value>
    <comment>The menu title for unfolding a specific level</comment>
  </data>
  <data name="Message.AlreadyOpen.Text" xml:space="preserve">
    <value>The document '{0}' is already open. Opening a document more than once is dangerous and can lead to loss of data, unless you save it with a different name straight away.

Are you completely sure you want to open this document again?</value>
  </data>
  <data name="Message.AlreadyOpen.Title" xml:space="preserve">
    <value>Document Already Open</value>
  </data>
  <data name="Message.CallbackError.Title" xml:space="preserve">
    <value>Error Generating Callbacks</value>
  </data>
  <data name="Message.ChangeIdError.Title" xml:space="preserve">
    <value>Error Changing Icon ID</value>
  </data>
  <data name="Message.CloseUnsavedDoc.Text" xml:space="preserve">
    <value>File {0} has unsaved changes. Do you want to save them before closing it?</value>
    <comment>{0} is the placeholder for the file name</comment>
  </data>
  <data name="Message.CloseUnsavedDoc.Title" xml:space="preserve">
    <value>Unsaved Changes</value>
  </data>
  <data name="Message.IconExists.Text" xml:space="preserve">
    <value>This custom UI file already has an icon with id {0}. Do you want to insert the new icon with id {1} instead?</value>
  </data>
  <data name="Message.IconExists.Title" xml:space="preserve">
    <value>Icon Already Exists</value>
  </data>
  <data name="Message.InsertSample.Text" xml:space="preserve">
    <value>This will insert the sample XML code on the current cursor position. Are you sure you want to continue?</value>
  </data>
  <data name="Message.InsertSample.Title" xml:space="preserve">
    <value>Insert XML Sample</value>
  </data>
  <data name="Message.InsertSampleError.Title" xml:space="preserve">
    <value>Error inserting XML sample</value>
  </data>
  <data name="Message.NewVersion.Text" xml:space="preserve">
    <value>Release version {0} is now available. Do you want to download it?</value>
  </data>
  <data name="Message.NewVersion.Title" xml:space="preserve">
    <value>Newer Version Available</value>
  </data>
  <data name="Message.NoCallbacks.Text" xml:space="preserve">
    <value>There is no callback to be generated.</value>
  </data>
  <data name="Message.NoCallbacks.Title" xml:space="preserve">
    <value>Generate Callbacks</value>
  </data>
  <data name="Message.OpenError.Title" xml:space="preserve">
    <value>Error opening Office document</value>
  </data>
  <data name="Message.RemoveIcon.Text" xml:space="preserve">
    <value>This action cannot be undone. Are you sure you want to continue?</value>
  </data>
  <data name="Message.RemoveIcon.Title" xml:space="preserve">
    <value>Remove Icon</value>
  </data>
  <data name="Message.RemovePart.Text" xml:space="preserve">
    <value>This action cannot be undone. Are you sure you want to continue?</value>
  </data>
  <data name="Message.RemovePart.Title" xml:space="preserve">
    <value>Remove XML part</value>
  </data>
  <data name="Message.SaveError.Title" xml:space="preserve">
    <value>Error saving Office document</value>
  </data>
  <data name="Message.ValidXml.Text" xml:space="preserve">
    <value>Custom UI XML is well formed.</value>
  </data>
  <data name="Message.ValidXml.Title" xml:space="preserve">
    <value>XML is Valid</value>
  </data>
  <data name="Message.VersionCopy.Text" xml:space="preserve">
    <value>The version information has been copied to the clipboard.</value>
  </data>
  <data name="Message.VersionCopy.Title" xml:space="preserve">
    <value>Version Information Copied</value>
  </data>
  <data name="OpenDialog.Document.Title" xml:space="preserve">
    <value>Open OOXML Document</value>
  </data>
  <data name="OpenDialog.Icons.Title" xml:space="preserve">
    <value>Insert Custom Icons</value>
  </data>
  <data name="SaveDialog.SaveAs.Title" xml:space="preserve">
    <value>Save OOXML Document</value>
  </data>
  <data name="Settings.Accept" xml:space="preserve">
    <value>Accept</value>
  </data>
  <data name="Settings.Apply" xml:space="preserve">
    <value>Apply</value>
  </data>
  <data name="Settings.Colors" xml:space="preserve">
    <value>Editor colors</value>
  </data>
  <data name="Settings.Colors.Attribute" xml:space="preserve">
    <value>Attribute</value>
  </data>
  <data name="Settings.Colors.Background" xml:space="preserve">
    <value>Background</value>
  </data>
  <data name="Settings.Colors.Comment" xml:space="preserve">
    <value>Comment</value>
  </data>
  <data name="Settings.Colors.Default" xml:space="preserve">
    <value>Normal Text</value>
  </data>
  <data name="Settings.Colors.String" xml:space="preserve">
    <value>String</value>
  </data>
  <data name="Settings.Colors.Tag" xml:space="preserve">
    <value>Tag</value>
  </data>
  <data name="Settings.Editor" xml:space="preserve">
    <value>Other editor settings</value>
  </data>
  <data name="Settings.Editor.AutoIndent" xml:space="preserve">
    <value>Auto-indent new lines</value>
  </data>
  <data name="Settings.Editor.FontSize" xml:space="preserve">
    <value>Font Size</value>
  </data>
  <data name="Settings.Editor.TabWidth" xml:space="preserve">
    <value>Tab Width</value>
  </data>
  <data name="Settings.Editor.WrapMode" xml:space="preserve">
    <value>Wrap Mode</value>
  </data>
  <data name="Settings.FileAssociations" xml:space="preserve">
    <value>File Associations</value>
  </data>
  <data name="Settings.FileAssociations.CheckAll" xml:space="preserve">
    <value>Check All</value>
  </data>
  <data name="Settings.FileAssociations.ToolTip" xml:space="preserve">
    <value>A context menu entry will appear in Windows Explorer to edit these files directly with the tool</value>
  </data>
  <data name="Settings.FileAssociations.UncheckAll" xml:space="preserve">
    <value>Uncheck All</value>
  </data>
  <data name="Settings.Misc" xml:space="preserve">
    <value>Misc</value>
  </data>
  <data name="Settings.Misc.DefaultTemplates" xml:space="preserve">
    <value>Show default XML templates in the Insert menu</value>
  </data>
  <data name="Settings.Misc.ExtraTemplates" xml:space="preserve">
    <value>Additional XML templates to load:</value>
  </data>
  <data name="Settings.Misc.ExtraTemplates.ToolTip" xml:space="preserve">
    <value>One path per line. Paths can be either XML files or folders containing those. They can also be relative to the tool's folder</value>
  </data>
  <data name="Settings.Misc.Language" xml:space="preserve">
    <value>Language</value>
  </data>
  <data name="Settings.Misc.PreserveAttributes" xml:space="preserve">
    <value>Preserve file attributes when saving an already existing document</value>
  </data>
  <data name="Settings.Misc.PreserveAttributes.ToolTip" xml:space="preserve">
    <value>If checked, read-only files will keep to be read-only after saving them for example</value>
  </data>
  <data name="Settings.ResetDefaults" xml:space="preserve">
    <value>Reset Defaults</value>
  </data>
  <data name="Settings.Title" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="ToolBar.Callbacks" xml:space="preserve">
    <value>Generate Callbacks</value>
  </data>
  <data name="ToolBar.Callbacks.ToolTip" xml:space="preserve">
    <value>Generate callbacks for the current XML file</value>
  </data>
  <data name="ToolBar.InsertIcons" xml:space="preserve">
    <value>Insert Icons</value>
  </data>
  <data name="ToolBar.InsertIcons.ToolTip" xml:space="preserve">
    <value>Insert Icons</value>
  </data>
  <data name="ToolBar.Open" xml:space="preserve">
    <value>Open</value>
  </data>
  <data name="ToolBar.Open.ToolTip" xml:space="preserve">
    <value>Open an Office document</value>
  </data>
  <data name="ToolBar.ReloadOnSave" xml:space="preserve">
    <value>Reload on Save</value>
  </data>
  <data name="ToolBar.ReloadOnSave.ToolTip" xml:space="preserve">
    <value>To ensure you do not delete changes made externally, you can reload the documents right before they are to be saved</value>
  </data>
  <data name="ToolBar.Save" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="ToolBar.Save.ToolTip" xml:space="preserve">
    <value>Save the current Office document</value>
  </data>
  <data name="ToolBar.Settings" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="ToolBar.Settings.ToolTip" xml:space="preserve">
    <value>View the editor settings</value>
  </data>
  <data name="ToolBar.ShowWhitespaces.ToolTip" xml:space="preserve">
    <value>Show space, tab and line end characters in the editor</value>
  </data>
  <data name="ToolBar.ToggleComment.ToolTip" xml:space="preserve">
    <value>Comment / uncomment the currently selected lines</value>
  </data>
  <data name="ToolBar.Validate" xml:space="preserve">
    <value>Validate</value>
  </data>
  <data name="ToolBar.Validate.ToolTip" xml:space="preserve">
    <value>Check whether the current XML file conforms to its corresponding schema</value>
  </data>
  <data name="ToolBar.VersionAvailable" xml:space="preserve">
    <value>v{0} Avalilable!</value>
    <comment>{0} is the placeholder for the verison, e.g. "1.2.3"</comment>
  </data>
  <data name="Validation.MutuallyExclusive" xml:space="preserve">
    <value>You can only define one of the following attributes in an element: {0}</value>
  </data>
  <data name="Validation.WrongNamespace" xml:space="preserve">
    <value>Unknown namespace "{0}". Custom UI XML namespace must be "{1}"</value>
  </data>
</root>