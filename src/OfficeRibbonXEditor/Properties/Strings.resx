<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Menu.Edit" xml:space="preserve">
    <value>_Edit</value>
  </data>
  <data name="Menu.Edit.Copy" xml:space="preserve">
    <value>Copy</value>
  </data>
  <data name="Menu.Edit.Cut" xml:space="preserve">
    <value>Cut</value>
  </data>
  <data name="Menu.Edit.Find" xml:space="preserve">
    <value>Find...</value>
  </data>
  <data name="Menu.Edit.FindNext" xml:space="preserve">
    <value>Find Next</value>
  </data>
  <data name="Menu.Edit.FindPrevious" xml:space="preserve">
    <value>Find Previous</value>
  </data>
  <data name="Menu.Edit.GoTo" xml:space="preserve">
    <value>Go To Line...</value>
  </data>
  <data name="Menu.Edit.Incremental" xml:space="preserve">
    <value>Incremental Search...</value>
  </data>
  <data name="Menu.Edit.Paste" xml:space="preserve">
    <value>Paste</value>
  </data>
  <data name="Menu.Edit.Redo" xml:space="preserve">
    <value>Redo</value>
  </data>
  <data name="Menu.Edit.Replace" xml:space="preserve">
    <value>Replace...</value>
  </data>
  <data name="Menu.Edit.SelectAll" xml:space="preserve">
    <value>Select All</value>
  </data>
  <data name="Menu.Edit.Undo" xml:space="preserve">
    <value>Undo</value>
  </data>
  <data name="Menu.File" xml:space="preserve">
    <value>_File</value>
  </data>
  <data name="Menu.File.Close" xml:space="preserve">
    <value>Close Current Document</value>
  </data>
  <data name="Menu.File.Exit" xml:space="preserve">
    <value>Exit</value>
  </data>
  <data name="Menu.File.Open" xml:space="preserve">
    <value>Open</value>
  </data>
  <data name="Menu.File.Save" xml:space="preserve">
    <value>Save Current Document</value>
  </data>
  <data name="Menu.File.SaveAll" xml:space="preserve">
    <value>Save All Documents</value>
  </data>
  <data name="Menu.File.SaveAs" xml:space="preserve">
    <value>Save As...</value>
  </data>
  <data name="Menu.File.SaveAs.ToolTip" xml:space="preserve">
    <value>Save the current document with a different name</value>
  </data>
  <data name="Menu.FIle.SaveCopy" xml:space="preserve">
    <value>Save a Copy As...</value>
  </data>
  <data name="Menu.File.SaveCopy.ToolTip" xml:space="preserve">
    <value>Save a completely separate copy of the current document</value>
  </data>
  <data name="Menu.File.Settings" xml:space="preserve">
    <value>Settings...</value>
  </data>
  <data name="Menu.Help" xml:space="preserve">
    <value>_Help</value>
  </data>
  <data name="Menu.Help.UsefulLinks" xml:space="preserve">
    <value>Useful Links</value>
  </data>
  <data name="Menu.Insert" xml:space="preserve">
    <value>_Insert</value>
  </data>
  <data name="Menu.Insert.Icons" xml:space="preserve">
    <value>Icons...</value>
  </data>
  <data name="Menu.Insert.Office2007" xml:space="preserve">
    <value>Office 2007 Custom UI Part</value>
  </data>
  <data name="Menu.Insert.Office2010" xml:space="preserve">
    <value>Office 2010+ Custom UI Part</value>
  </data>
  <data name="Menu.Insert.Sample" xml:space="preserve">
    <value>Sample XML</value>
  </data>
  <data name="Menu.View" xml:space="preserve">
    <value>_View</value>
  </data>
  <data name="Menu.View.FoldAll" xml:space="preserve">
    <value>Fold All</value>
  </data>
  <data name="Menu.View.FoldCurrent" xml:space="preserve">
    <value>Fold Current Level</value>
  </data>
  <data name="Menu.View.FoldLevel" xml:space="preserve">
    <value>Fold Level</value>
    <comment>The menu title for folding a specific level</comment>
  </data>
  <data name="Menu.View.UnfoldAll" xml:space="preserve">
    <value>UnfoldAll</value>
  </data>
  <data name="Menu.View.UnfoldCurrent" xml:space="preserve">
    <value>Unfold Current Level</value>
  </data>
  <data name="Menu.View.UnfoldLevel" xml:space="preserve">
    <value>Unfold Level</value>
    <comment>The menu title for unfolding a specific level</comment>
  </data>
  <data name="ToolBar.Callbacks" xml:space="preserve">
    <value>Generate Callbacks</value>
  </data>
  <data name="ToolBar.Callbacks.ToolTip" xml:space="preserve">
    <value>Generate callbacks for the current XML file</value>
  </data>
  <data name="ToolBar.InsertIcons" xml:space="preserve">
    <value>Insert Icons</value>
  </data>
  <data name="ToolBar.InsertIcons.ToolTip" xml:space="preserve">
    <value>Insert Icons</value>
  </data>
  <data name="ToolBar.Open" xml:space="preserve">
    <value>Open</value>
  </data>
  <data name="ToolBar.Open.ToolTip" xml:space="preserve">
    <value>Open an Office document</value>
  </data>
  <data name="ToolBar.ReloadOnSave" xml:space="preserve">
    <value>Reload on Save</value>
  </data>
  <data name="ToolBar.ReloadOnSave.ToolTip" xml:space="preserve">
    <value>To ensure you do not delete changes made externally, you can reload the documents right before they are to be saved</value>
  </data>
  <data name="ToolBar.Save" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="ToolBar.Save.ToolTip" xml:space="preserve">
    <value>Save the current Office document</value>
  </data>
  <data name="ToolBar.Settings" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="ToolBar.Settings.ToolTip" xml:space="preserve">
    <value>View the editor settings</value>
  </data>
  <data name="ToolBar.ShowWhitespaces.ToolTip" xml:space="preserve">
    <value>Show space, tab and line end characters in the editor</value>
  </data>
  <data name="ToolBar.ToggleComment.ToolTip" xml:space="preserve">
    <value>Comment / uncomment the currently selected lines</value>
  </data>
  <data name="ToolBar.Validate" xml:space="preserve">
    <value>Validate</value>
  </data>
  <data name="ToolBar.Validate.ToolTip" xml:space="preserve">
    <value>Check whether the current XML file conforms to its corresponding schema</value>
  </data>
  <data name="ToolBar.VersionAvailable" xml:space="preserve">
    <value>v{0} Avalilable!</value>
    <comment>{0} is the placeholder for the verison, e.g. "1.2.3"</comment>
  </data>
</root>