trigger: none

pool:
  vmImage: 'ubuntu-latest'

variables:
- group: GitHubPATGroup

jobs:
- deployment: Deploy
  environment: Release
  strategy:
    runOnce:
      deploy:
        steps:
        
        - task: DownloadPipelineArtifact@2
          inputs:
            buildType: 'specific'
            project: '31ef26fb-4bc4-4b29-854b-920268892dcd'
            definition: '1'
            buildVersionToDownload: 'specific'
            buildId: '$(BuildId)'
            targetPath: '$(Pipeline.Workspace)'

        - task: PowerShell@2
          displayName: 'Check Version'
          inputs:
            targetType: 'filePath'
            filePath: '$(Pipeline.Workspace)/ReleaseScripts/PreRelease.ps1'
            arguments: '"$(Pipeline.Workspace)"'

        - task: ArchiveFiles@2
          displayName: 'Archive .NET Framework Executable'
          inputs:
            rootFolderOrFile: '$(Pipeline.Workspace)/.NET Framework Executable/OfficeRibbonXEditor.exe'
            includeRootFolder: false
            archiveFile: '$(Build.ArtifactStagingDirectory)/OfficeRibbonXEditor-NETFramework.zip'
        - powershell: >-
            Copy-Item
            -Path "$(Pipeline.Workspace)/.NET Framework Installer/OfficeRibbonXEditor.exe"
            -Destination "$(Build.ArtifactStagingDirectory)/OfficeRibbonXEditor-Installer-NETFramework.exe"
          displayName: 'Copy .NET Framework Installer'
        - task: ArchiveFiles@2
          displayName: 'Archive .NET Core Binaries'
          inputs:
            rootFolderOrFile: '$(Pipeline.Workspace)/.NET Core Binaries/OfficeRibbonXEditor'
            includeRootFolder: false
            archiveFile: '$(Build.ArtifactStagingDirectory)/OfficeRibbonXEditor-NETCore.zip'
        - powershell: >-
            Copy-Item
            -Path "$(Pipeline.Workspace)/.NET Core Installer/OfficeRibbonXEditor.exe"
            -Destination "$(Build.ArtifactStagingDirectory)/OfficeRibbonXEditor-Installer-NETCore.exe"
          displayName: 'Copy .NET Core Installer'
        - task: GitHubRelease@1
          displayName: 'Create GitHub Release'
          inputs:
            gitHubConnection: 'fernandreu-pat'
            repositoryName: 'fernandreu/office-ribbonx-editor'
            tagSource: manual
            tag: 'v$(ThreeDigitVersion)'
            title: 'Office RibbonX Editor $(ThreeDigitVersion) (Build $(Build.BuildId))'
            releaseNotesSource: inline
            releaseNotesInline: |
              Released automatically from [Azure Pipelines](https://dev.azure.com/fernandreu-public/OfficeRibbonXEditor/_build/results?buildId=$(Build.BuildId))
              
              ## What's New
              
              For a full list of closed issues since last release, see below. 
              
              ## How to install / use
              
              Download one of the items from the `Assets` section below.
              
              Compressed `.zip` files do not require installation (i.e. will not create any
              entry in the control panel's program list). When feasible, these will contain
              a single `.exe` file.
              
              The .NET Framework builds require at least version 4.6.1 of the .NET Framework
              Runtime. The .NET Core builds are still experimental and require at least
              version 3.0 of the .NET Core Runtime (the one for desktop apps is enough). If
              you need any of these runtimes, check [Microsoft's .NET download page](https://dotnet.microsoft.com/download).
              
              **Note: As of version 1.6, both the installer and executable are cryptographically
              signed. In the long therm, this should prevent security warnings in Windows due
              to untrusted software being executed (see #74). This will not take effect immediately,
              as it is a reputation system based on the number of downloads. Similarly, when
              attempting to download the assets, some browsers might show warning messages
              indicating these are not commonly downloaded, but it is completely safe to do so.**
            assets: '$(Build.ArtifactStagingDirectory)/*.*'
            isDraft: true
            changeLogType: issueBased
            changeLogLabels: '[{ "label" : "enhancement", "displayName" : "Enhancements", "state" : "closed" }, { "label" : "bug", "displayName" : "Bugs", "state" : "closed" }]'
        - powershell: |
            # TODO: This entire script is deprecated, as latest release version is now read directly 
            # from the GitHub API. This is only kept for legacy purposes (i.e. until enough time 
            # passes for users to update to a more recent tool). Once this is removed, the corresponding
            # GitHub variables will no longer be needed.
            
            $version = "$(ThreeDigitVersion).$(Build.BuildId)"
            $version = $version.Substring(1)
            $pat = "$(GitHubPAT)"
            $name = "$(GitHubName)"
            $email = "$(GitHubEmail)"
            
            # Check if all necessary variables were passed correctly
            if ($version.Length -eq 0) {
                Write-Host "##vso[task.LogIssue type=error;]The version is missing"
                exit 1
            } elseif ($pat.Length -eq 0) {
                Write-Host "##vso[task.LogIssue type=error;]The GitHub PAT is missing"
                exit 1
            } elseif ($name.Length -eq 0) {
                Write-Host "##vso[task.LogIssue type=error;]The GitHub name is missing"
                exit 1
            } elseif ($email.Length -eq 0) {
                Write-Host "##vso[task.LogIssue type=error;]The GitHub email is missing"
                exit 1
            }
            
            New-Item -Path "tmp" -ItemType "directory"
            cd tmp
            git clone --single-branch --branch info https://github.com/fernandreu/office-ribbonx-editor.git -q
            cd office-ribbonx-editor

            Write-Host "Version passed is: $version"
            $version | Out-File -Encoding UTF8 -FilePath .\RELEASE-VERSION
            git config --global user.email "$email"
            git config --global user.name "$name"
            git commit -a -m "Update release version to $version" -q
            git push https://$($pat)@github.com/fernandreu/office-ribbonx-editor.git info -q
          displayName: 'Update Info Branch'
